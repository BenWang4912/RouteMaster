@model RouteMaster.Models.ViewModels.ExtraServicesDetailsEditVM

@{
    ViewBag.Title = "額外服務項目訂單管理";
}




@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>ExtraServicesDetailsVM</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.OrderId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OrderId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.OrderId, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.OrderId)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ExtraServiceId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ExtraServiceId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.ExtraServiceId, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ExtraServiceId)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ExtraServiceName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ExtraServiceName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            @Html.ValidationMessageFor(model => model.ExtraServiceName, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ExtraServiceName)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price, "{0:C}", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", id = "price" } })
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="mb-3">
        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", id = "quantity" } })
            @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <h3>總價格: <span id="totalPrice"></span></h3>
                <h4 id="calculationResult"></h4>
            </div>
        </div>*@

    <div class="form-group mb-4">
        <div class="mb-3"></div>
        @Html.Label("Total Price", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="text" class="form-control" id="totalPrice" readonly />
        </div>
        </div>
    </div>

    <div class="col-md-4 col-md-10 mb-4 alert" role="alert">
        <div class="btn-group mb-3" role="group" aria-label="Save and Back buttons">
            <button id="demo1" class="btn btn-primary" style="width:100px;">儲存</button>
            <div class="btn-group" role="group" aria-label="Back button">
                @Html.ActionLink("回上頁", "Index", "", new { @class = "btn btn-warning" })
            </div>
        </div>
    </div>

}

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
    $(document).ready(function () {
        var priceInput = $('#price');
        var quantityInput = $('#quantity');
        var calculationResult = $('#calculationResult');

        priceInput.on('input', updateTotalPrice);
        quantityInput.on('input', updateTotalPrice);
        updateTotalPrice();

        function updateTotalPrice() {
            var price = parseFloat(priceInput.val());
            var quantity = parseInt(quantityInput.val());

           
            if (!isNaN(price) && !isNaN(quantity)) {
               
                var totalPrice = price * quantity;


                var formattedPrice = '$' + totalPrice.toFixed().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                $('#totalPrice').val(formattedPrice);

               
                var result = price * quantity;
                calculationResult.text("結果: " + result);
            }
        }
    });
    </script>

}