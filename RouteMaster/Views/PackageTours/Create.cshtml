@model RouteMaster.Models.ViewModels.PackageTourCreateVM


@section Styles{
    <style>
        .attSize {
            width: 30px;
            height: 30px;
        }

        .extSize {
            width: 30px;
            height: 30px;
        }

        .actSize {
            width: 30px;
            height: 30px;
        }
    </style>
}

<div id="actPartialView">
    @{
        Html.RenderAction("ActivitiesList");
    }
</div>

@{
    Html.RenderAction("ExtraServicesList");
}

@{
    Html.RenderAction("AttractionsList");
}








<h2>建立套裝行程</h2>


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "CreatePackageTour" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="mb-3">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "form-label col-md-2" })
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "form-label col-md-2" })
            <div class="checkbox">
                @Html.EditorFor(model => model.Status)
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.CouponId, htmlAttributes: new { @class = "form-label col-md-2" })
            @Html.DropDownList("CouponId", null, htmlAttributes: new { @class = "form-select" })
            @Html.ValidationMessageFor(model => model.CouponId, "", new { @class = "text-danger" })
        </div>




        <h2>活動列表</h2>
        <div id="activityContainer">


        </div>

        <h2>額外服務列表</h2>
        <div id="extraServiceContainer">


        </div>


        <h2>景點列表</h2>
        <div id="attractionContainer">


        </div>






        <div class="mb-3">
            <input type="submit" value="新增" class="btn btn-primary" />
        </div>
    </div>

}


@section Scripts {

    <script>
        const activities = @Html.Raw(Json.Encode(ViewBag.Activities));
        const actsContainer = document.querySelector("#activityContainer");     
        function bindingSelectAct() {
            let addActBtns = document.querySelectorAll(".addActivity");

            for (let i = 0; i < addActBtns.length; i++) {
                addActBtns[i].addEventListener('click', () => {

                    var id = parseInt(addActBtns[i].getAttribute('data-id'));
                    var newActivity = document.createElement("div");
                    actsContainer.appendChild(newActivity);
                    addActBtns[i].disabled = true;

                    var nameExists = false;

                    for (let j = 0; j < activities.length; j++) {
                        if (activities[j].Id == id) {

                            //console.log(typeof (activities[j].Name))
                            //console.log((activities[j].Name))

                            let children = actsContainer.childNodes;              
                            //console.log(children);

                            for (let k = 0; k < children.length; k++) {                              

                                //console.log(typeof (children[k].textContent))

                                //console.log(children[k].textContent)
                          
                                if (children[k].textContent == activities[j].Name) {

                                    nameExists = true;
                                    //console.log(nameExists);
                                    
                                    break;
                                }
                            }

                            if (nameExists)
                            {
                                return;
                            }

                            newActivity.textContent = activities[j].Name;


                            // 生成複選框
                            var checkbox = document.createElement("input");
                            checkbox.type = "checkbox";
                            checkbox.value = activities[j].Id;
                            checkbox.checked = true;
                            checkbox.classList.add('actSize')

                            checkbox.addEventListener('change', function () {
                                if (!this.checked) {
                                    this.parentNode.remove();
                                    addActBtns[i].disabled = false;
                                }
                            })
                            // 添加到表单

                            newActivity.appendChild(checkbox);
                            break;
                        }
                    }
                });
            }

        }
        bindingSelectAct();


















        const extraServices =@Html.Raw(Json.Encode(ViewBag.ExtraServices));
        const extContainer = document.querySelector("#extraServiceContainer");
        const addExtBtns = document.querySelectorAll(".addExtraService");

        for (let i = 0; i < addExtBtns.length; i++) {
            addExtBtns[i].addEventListener('click', () => {

                let id = parseInt(addExtBtns[i].getAttribute('data-id'));
                let newExtraService = document.createElement("div");
                extContainer.appendChild(newExtraService);
                addExtBtns[i].disabled = true;


                for (let j = 0; j < extraServices.length; j++) {
                    if (extraServices[j].Id === id) {
                        newExtraService.textContent = extraServices[j].Name;
                        // 生成複選框
                        var checkbox = document.createElement("input");
                        checkbox.type = "checkbox";
                        checkbox.value = extraServices[j].Id;
                        checkbox.checked = true;
                        checkbox.classList.add('extSize')

                        checkbox.addEventListener('change', function () {
                            if (!this.checked) {
                                this.parentNode.remove();
                                addExtBtns[i].disabled = false;
                            }
                        })

                        // 添加到表单
                        newExtraService.appendChild(checkbox);
                        break;
                    }
                }
            });
        }


        const attractions = @Html.Raw(Json.Encode(ViewBag.Attractions));
        const attsContainer = document.querySelector("#attractionContainer");
        const addAttBtns = document.querySelectorAll(".addAttraction");


        for (let i = 0; i < addAttBtns.length; i++) {
            addAttBtns[i].addEventListener('click', () => {


                let id = parseInt(addAttBtns[i].getAttribute('data-id'));
                let newAttraction = document.createElement("div");
                attsContainer.appendChild(newAttraction);
                addAttBtns[i].disabled = true;

                for (let j = 0; j < attractions.length; j++) {
                    if (attractions[j].Id === id) {

                        newAttraction.textContent = attractions[j].Name;
                        //生成複選框


                        let checkbox = document.createElement("input");
                        checkbox.type = "checkbox";
                        checkbox.value = attractions[j].Id;
                        checkbox.checked = true;
                        checkbox.classList.add('attSize')
                        //綁定移除
                        checkbox.addEventListener('change', function () {
                            if (!this.checked) {
                                this.parentNode.remove();
                                addAttBtns[i].disabled = false;
                            }
                        })
                        newAttraction.appendChild(checkbox);
                        break;
                    }
                }

            });
        }

        const form = document.querySelector('#CreatePackageTour');
        form.addEventListener('submit', function () {

            let attCheckBoxies = document.querySelectorAll('.attSize');
            for (let i = 0; i < attCheckBoxies.length; i++) {
                attCheckBoxies[i].setAttribute('name', "Attractions[" + i + "].Id");
            }

            let extCheckBoxies = document.querySelectorAll('.extSize');
            for (let i = 0; i < extCheckBoxies.length; i++) {
                extCheckBoxies[i].setAttribute('name', "ExtraServices["+i+"].Id")
            }


            let actCheckBoxies = document.querySelectorAll('.actSize');
            for (let i = 0; i < actCheckBoxies.length; i++) {
                actCheckBoxies[i].setAttribute('name', "Activities[" + i + "].Id")
            }

        })






    </script>



    <script>
        function getSearchCriteria() {
            var criteria = {};
            criteria.name = document.querySelector('input[name="name"]').value;
            criteria.activityCategoryId = document.querySelector('#s_actCategoryId').value;
            criteria.attractionId = document.querySelector('#s_attractionId').value;
            criteria.regionId = document.querySelector('#s_regionId').value;
            criteria.minPrice = document.querySelector('input[name="minPrice"]').value;
            criteria.maxPrice = document.querySelector('input[name="maxPrice"]').value;
            criteria.startDate = document.querySelector('input[name="startDate"]').value;
            criteria.endDate = document.querySelector('input[name="endDate"]').value;
            criteria.showAvailableOnly = document.querySelector('#status').checked;
            return criteria;
        }

        const actform = document.querySelector('#ActivityPartial');
        actform.addEventListener('submit', function (event) {
            event.preventDefault();
        });



       






        document.querySelector('#ActivityPartial').addEventListener('click', function (event) {
            // 檢查被點擊的目標是否是目標按鍵
            if (event.target && event.target.id === 'actSearch') {
                // 處理按鈕事件的邏輯
                var criteria = getSearchCriteria();

                var url = '/PackageTours/ActivitiesList?name='
                    + encodeURIComponent(criteria.name)
                    + '&activityCategoryId=' + encodeURIComponent(criteria.activityCategoryId)
                    + '&attractionId=' + encodeURIComponent(criteria.attractionId)
                    + '&regionId=' + encodeURIComponent(criteria.regionId)
                    + '&minPrice=' + encodeURIComponent(criteria.minPrice)
                    + '&maxPrice=' + encodeURIComponent(criteria.maxPrice)
                    + '&startDate=' + encodeURIComponent(criteria.startDate)
                    + '&endDate=' + encodeURIComponent(criteria.endDate)
                    + '&ShowAvailableOnly=' + encodeURIComponent(criteria.showAvailableOnly)
                    + '&random=';

                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, true);

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                        let response = xhr.responseText;
                        let partialViewContainer = document.querySelector('#ActivityPartial');
                        partialViewContainer.innerHTML = response; 

                        //重新綁定事件
                        bindingSelectAct();

                    }
                };
                xhr.send();
            }
        });














    </script>






}
