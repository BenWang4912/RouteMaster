@model RouteMaster.Models.ViewModels.PackageTourCreateVM

@{
    ViewBag.Title = "Create";
}
@{
    Html.RenderAction("ActivitiesList");
}
@{
    Html.RenderAction("ExtraServicesList");
}

@*@{
        Html.RenderAction("AttractionsList");
    }*@

<h2>建立套裝行程</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="mb-3">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "form-label col-md-2" })
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "form-label col-md-2" })
            <div class="checkbox">
                @Html.EditorFor(model => model.Status)
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.CouponId, htmlAttributes: new { @class = "form-label col-md-2" })
            @Html.DropDownList("CouponId", null, htmlAttributes: new { @class = "form-select" })
            @Html.ValidationMessageFor(model => model.CouponId, "", new { @class = "text-danger" })
        </div>




        <h2>活動列表</h2>
        <div id="activityContainer">            

           
        </div>

        <h2>額外服務列表</h2>
        <div id="extraServiceContainer">


        </div>




       
        <div class="mb-3">
            <input type="submit" value="新增" class="btn btn-primary" />
        </div>
    </div>

}


@section Scripts {

    <script>

        var activities = @Html.Raw(Json.Encode(ViewBag.Activities));
        var actsContainer = document.querySelector("#activityContainer");
        var addActBtns = document.querySelectorAll(".addActivity");
        var arrOfActivities =[];
        for (let i = 0; i < addActBtns.length; i++) {
            addActBtns[i].addEventListener('click', () => {

                var id = parseInt(addActBtns[i].getAttribute('data-id'));
                var newActivity = document.createElement("div");
                actsContainer.appendChild(newActivity);
                addActBtns[i].disabled = true;


                //console.log(activities)

                for (let j = 0; j < activities.length; j++) {
                    if (activities[j].Id === id) {
                        //console.log("找到符合條件的元素: ", activities[j]);
                        arrOfActivities.push(activities[j]);
                        newActivity.textContent = activities[j].Name;
                        break;
                    }
                }
            });
        }


        var extraServices =@Html.Raw(Json.Encode(ViewBag.ExtraServices));
        var extContainer = document.querySelector("#extraServiceContainer");
        var addExtBtns = document.querySelectorAll(".addExtraService");
        var arrOfExtraServices = [];

        


        for (let i = 0; i < addExtBtns.length; i++) {
            addExtBtns[i].addEventListener('click', () => {              


                var id = parseInt(addExtBtns[i].getAttribute('data-id'));

               


                var newExtraService = document.createElement("div");
                extContainer.appendChild(newExtraService);
                addExtBtns[i].disabled = true;


                for (let j = 0; j < extraServices.length; j++) {
                    if (extraServices[j].Id === id) {
                        console.log("找到符合條件的元素: ", extraServices[j])
                        arrOfExtraServices.push(extraServices[j]);                        
                        newExtraService.textContent = extraServices[j].Name;
                        break;                     
                    }
                }
            });
        }

        






        










            // 監聽表單提交事件
            var form = document.querySelector('form');
            form.addEventListener('submit', function(e) {
                e.preventDefault(); // 防止表單直接提交

                // 使用AJAX發送POST請求
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '@Url.Action("Create", "PackageTours")'); // 替換成您的控制器路由
                xhr.setRequestHeader('Content-Type', 'application/json');


                //通過防偽驗證 [ValidateAntiForgeryToken]
                //xhr.setRequestHeader('RequestVerificationToken', $('input[name="__RequestVerificationToken"]').val());


       

                var data = JSON.stringify(
                    {
                     arrOfActivities: arrOfActivities,
                     arrOfExtraServices: arrOfExtraServices
                         //todo其他欲傳送資料
                    });


                // 回應處理
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        if (xhr.status === 200) {                            
                            console.log('請求成功');                     
                        } else {                    
                            console.log('請求失敗');
                        }
                    }
                };

                // 發送請求
                xhr.send(data);
            });
  

    </script>
}
