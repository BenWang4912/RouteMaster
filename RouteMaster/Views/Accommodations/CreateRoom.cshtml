@model RouteMaster.Models.ViewModels.Accommodations.Room.RoomCreateVM

@section Styles {
    <style>

        .drop-zone {
            border: 2px dashed #ccc;
            padding: 20px;
            text-align: center;
            cursor: pointer;
        }

        .drop-zone p {
            margin: 0;
        }

        .image-preview {
            display: flex;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        .preview-image {
            width: 150px;
            height: 150px;
            object-fit: cover;
            margin: 10px;
            border: 1px solid #ccc;
        }
        #files{
            /*display:none;*/
        }
    </style>
}

@{
    ViewBag.Title = "CreateRoom";
    var roomType = ViewBag.RoomType;
}

@using (Html.BeginForm("CreateRoom", "Accommodations", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.AccommodationId)
    <div class="form-horizontal">
        <h4>RoomCreateVM</h4>
        <hr />
        <div class="row">
            <div class="col-2">
                <div class="mb-3">
                    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })*@
                        @*@Html.DropDownList("RoomType", null, htmlAttributes: new { @class = "form-control", @name = "Type" })*@
                        <select name="Type" id="s_categoryId" class="form-select">
                            @foreach (var type in roomType)
                            {
                                <option value="@type.Value">@type.Text</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="mb-3" style="margin-top: 20px;">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-primary" />
                    </div>
                </div>
                <div>
                    @Html.ActionLink("Back to List", "Index")
                </div>
            </div>

            <div class="col-10">
                <div class="drop-zone" id="dropZone">
                    <label for="files" class="d-block w-100 h-100">點擊這裡選擇或拖曳照片</label>
                </div>
                    <input id="files" type="file" name="files" class="form-control" multiple="multiple" accept="image/*" />
                <div class="image-preview" id="imagePreview"></div>
            </div>


        </div>
        
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        const dropZone = document.getElementById('dropZone');
        const imagePreview = document.getElementById('imagePreview');
        const fileInput = document.getElementById('files');

        dropZone.addEventListener('dragover', (event) => {
            event.preventDefault();
            dropZone.classList.add('drag-over');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('drag-over');
        });

        dropZone.addEventListener('drop', (event) => {
            event.preventDefault();
            dropZone.classList.remove('drag-over');

            const files = event.dataTransfer.files;
            handleFiles(files);
        });

        fileInput.addEventListener('change', (event) => {
            const files = event.target.files;
            handleFiles(files);
            //event.target.value = ''; // 清空文件選擇，以便重複選擇同一張圖片
        });

        function handleFiles(files) {
            for (let i = 0; i < files.length; i++) {
                const file = files[i];

                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();

                    reader.onload = (event) => {
                        const imageUrl = event.target.result;
                        const imageElement = document.createElement('img');
                        imageElement.src = imageUrl;
                        imageElement.classList.add('preview-image');

                        const imageName = `files`;
                        imageElement.setAttribute('name', imageName);

                        imagePreview.appendChild(imageElement);
                    };

                    reader.readAsDataURL(file);
                }
            }
        }
    </script>
}
